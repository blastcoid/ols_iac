configs:
  cm:
    url: "https://${sub}.${env}.${dns_name}"
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: ${extra_vars.github_client_id}
            clientSecret: $argocd-secret:dex.github.clientSecret
            redirectURI: 'https://${sub}.${env}.${dns_name}/api/dex/callback'
            orgs:
              - name: ${extra_vars.github_orgs}
  params:
    server.insecure: ${extra_vars.server_insecure}
  rbac:
    policy.default: role:readonly
    policy.csv: |
      # default policy
      p, role:readonly, applications, get, */*, allow
      p, role:readonly, certificates, get, *, allow
      p, role:readonly, clusters, get, *, allow
      p, role:readonly, repositories, get, *, allow
      p, role:readonly, projects, get, *, allow
      p, role:readonly, accounts, get, *, allow
      p, role:readonly, gpgkeys, get, *, allow
      p, role:readonly, logs, get, */*, allow
      # admin policy
      p, role:devops-role, applications, create, */*, allow
      p, role:devops-role, applications, update, */*, allow
      p, role:devops-role, applications, delete, */*, allow
      p, role:devops-role, applications, sync, */*, allow
      p, role:devops-role, applications, override, */*, allow
      p, role:devops-role, applications, action/*, */*, allow
      p, role:devops-role, applicationsets, get, */*, allow
      p, role:devops-role, applicationsets, create, */*, allow
      p, role:devops-role, applicationsets, update, */*, allow
      p, role:devops-role, applicationsets, delete, */*, allow
      p, role:devops-role, certificates, create, *, allow
      p, role:devops-role, certificates, update, *, allow
      p, role:devops-role, certificates, delete, *, allow
      p, role:devops-role, clusters, create, *, allow
      p, role:devops-role, clusters, update, *, allow
      p, role:devops-role, clusters, delete, *, allow
      p, role:devops-role, repositories, create, *, allow
      p, role:devops-role, repositories, update, *, allow
      p, role:devops-role, repositories, delete, *, allow
      p, role:devops-role, projects, create, *, allow
      p, role:devops-role, projects, update, *, allow
      p, role:devops-role, projects, delete, *, allow
      p, role:devops-role, accounts, update, *, allow
      p, role:devops-role, gpgkeys, create, *, allow
      p, role:devops-role, gpgkeys, delete, *, allow
      p, role:devops-role, exec, create, */*, allow
      # set admin policy for devops team in github orgs
      g, ${extra_vars.github_orgs}:devops, role:devops-role
      g, devops, role:devops-role
  # ref: https://github.com/argoproj-labs/argocd-vault-plugin/blob/main/manifests/cmp-sidecar/cmp-plugin.yaml
  cmp:
    # -- Create the argocd-cmp-cm configmap
    create: true
    plugins:
      argocd-vault-plugin-helm:
        allowConcurrency: true

        # Note: this command is run _before_ any Helm templating is done, therefore the logic is to check
        # if this looks like a Helm chart
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
        generate:
          # **IMPORTANT**: passing effectively allows users to run arbitrary code in the Argo CD
          # repo-server (or, if using a sidecar, in the plugin sidecar). Only use this when the users are completely trusted. If
          # possible, determine which Helm arguments are needed by your users and explicitly pass only those arguments.
          command:
            - sh
            - "-c"
            - |
              helm template $ARGOCD_APP_NAME -n $ARGOCD_APP_NAMESPACE . --include-crds |
              argocd-vault-plugin generate -
        lockRepo: false

# ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/
controller:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: "${service_account_arn}"
server:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: "${service_account_arn}"
  # service:
  #   type: ClusterIP
  ingress:
    enabled: true
    ingressClassName: alb
    hosts:
      - "${sub}.${env}.${dns_name}"
    annotations:
      external-dns.alpha.kubernetes.io/hostname: ${sub}.${env}.${dns_name}
      # external-dns.alpha.kubernetes.io/ttl: 300
      alb.ingress.kubernetes.io/group.name: ${unit}-${env}-svc-ingress
      alb.ingress.kubernetes.io/healthcheck-path: ${extra_vars.alb_healthcheck_path}
      alb.ingress.kubernetes.io/certificate-arn: ${extra_vars.alb_certificate_arn}
      alb.ingress.kubernetes.io/ssl-policy: ${extra_vars.alb_ssl_policy}
      alb.ingress.kubernetes.io/backend-protocol: ${extra_vars.alb_backend_protocol}
      alb.ingress.kubernetes.io/listen-ports: '${extra_vars.alb_listen_ports}'
      alb.ingress.kubernetes.io/scheme: ${extra_vars.alb_scheme}
      alb.ingress.kubernetes.io/target-type: ${extra_vars.alb_target_type}
      alb.ingress.kubernetes.io/group.order: ${extra_vars.alb_group_order}
    finalizers:
      - ingress.k8s.aws/resources
    tls:
      - hosts:
          - ${sub}.${env}.${dns_name}
    https: true
  ingressGrpc:
    enabled: true
    isAWSALB: true
    https: true
    awsALB:
      serviceType: ClusterIP

# ref: https://github.com/argoproj-labs/argocd-vault-plugin/blob/main/manifests/cmp-sidecar/argocd-repo-server.yaml
repoServer:
  serviceAccount:
    name: ${sub}-repo-server
    annotations:
      eks.amazonaws.com/role-arn: "${service_account_arn}"
    # Not strictly necessary, but required for passing AVP configuration from a secret and for using Kubernetes auth to Hashicorp Vault
    automountServiceAccountToken: true
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: argocd-cmp-cm
    - name: cmp-tmp
      emptyDir: {}
    - name: custom-tools
      emptyDir: {}
  initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: ${extra_vars.AVP_VERSION}
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${extra_vars.AVP_VERSION}/argocd-vault-plugin_${extra_vars.AVP_VERSION}_linux_arm64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/

      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  extraContainers:
    # argocd-vault-plugin with Helm
    - name: avp-helm
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v2.7.9
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: cmp-tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: argocd-vault-plugin-helm.yaml
          name: argocd-cmp-cm

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
