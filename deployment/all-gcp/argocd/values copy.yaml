global:
  nodeSelector:
    iam.gke.io/gke-metadata-server-enabled: "true"

configs:
  cm:
    url: "https://${feature}.${env}.${dns_name}"
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: ${extra_vars.github_client_id}
            clientSecret: $argocd-secret:dex.github.clientSecret
            redirectURI: 'https://${feature}.${env}.${dns_name}/api/dex/callback'
            orgs:
              - name: ${extra_vars.github_orgs}
  params:
    server.insecure: true
  rbac:
    policy.default: role:readonly
    policy.csv: |
      # default policy
      p, role:readonly, applications, get, */*, allow
      p, role:readonly, certificates, get, *, allow
      p, role:readonly, clusters, get, *, allow
      p, role:readonly, repositories, get, *, allow
      p, role:readonly, projects, get, *, allow
      p, role:readonly, accounts, get, *, allow
      p, role:readonly, gpgkeys, get, *, allow
      p, role:readonly, logs, get, */*, allow
      # admin policy
      p, role:devops-role, applications, create, */*, allow
      p, role:devops-role, applications, update, */*, allow
      p, role:devops-role, applications, delete, */*, allow
      p, role:devops-role, applications, sync, */*, allow
      p, role:devops-role, applications, override, */*, allow
      p, role:devops-role, applications, action/*, */*, allow
      p, role:devops-role, applicationsets, get, */*, allow
      p, role:devops-role, applicationsets, create, */*, allow
      p, role:devops-role, applicationsets, update, */*, allow
      p, role:devops-role, applicationsets, delete, */*, allow
      p, role:devops-role, certificates, create, *, allow
      p, role:devops-role, certificates, update, *, allow
      p, role:devops-role, certificates, delete, *, allow
      p, role:devops-role, clusters, create, *, allow
      p, role:devops-role, clusters, update, *, allow
      p, role:devops-role, clusters, delete, *, allow
      p, role:devops-role, repositories, create, *, allow
      p, role:devops-role, repositories, update, *, allow
      p, role:devops-role, repositories, delete, *, allow
      p, role:devops-role, projects, create, *, allow
      p, role:devops-role, projects, update, *, allow
      p, role:devops-role, projects, delete, *, allow
      p, role:devops-role, accounts, update, *, allow
      p, role:devops-role, gpgkeys, create, *, allow
      p, role:devops-role, gpgkeys, delete, *, allow
      p, role:devops-role, exec, create, */*, allow
      # set admin policy for devops team in github orgs
      g, ${extra_vars.github_orgs}:devops, role:devops-role
      g, devops, role:devops-role
  cmp:
    # -- Create the argocd-cmp-cm configmap
    create: true
    plugins:
      avp-helm:
        allowConcurrency: true

        # Note: this command is run _before_ any Helm templating is done, therefore the logic is to check
        # if this looks like a Helm chart
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
        generate:
          # **IMPORTANT**: passing effectively allows users to run arbitrary code in the Argo CD 
          # repo-server (or, if using a sidecar, in the plugin sidecar). Only use this when the users are completely trusted. If
          # possible, determine which Helm arguments are needed by your users and explicitly pass only those arguments.
          command:
            - sh
            - "-c"
            - |
              helm template $ARGOCD_APP_NAME -n $ARGOCD_APP_NAMESPACE . |
              argocd-vault-plugin generate -
        lockRepo: false

# ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/
controller:
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: "${service_account_annotation}"
server:
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: "${service_account_annotation}"
  service:
    type: ClusterIP
    servicePortHttp: 80
    servicePortHttpName: http
  ingress:
    enabled: true
    hosts:
      - "${feature}.${env}.${dns_name}"
    annotations:
      # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      external-dns.alpha.kubernetes.io/hostname: "${feature}.${env}.${dns_name}"
      external-dns.alpha.kubernetes.io/ttl: "300"
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-${unit}-${env}"
    ingressClassName: "nginx"
    tls:
      - secretName: "${unit}-${feature}-server-tls"
        hosts:
          - "${feature}.${env}.${dns_name}"
    # http: false

repoServer:
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: "${service_account_annotation}"
    # Not strictly necessary, but required for passing AVP configuration from a secret and for using Kubernetes auth to Hashicorp Vault
    automountServiceAccountToken: true
  volumeMounts:
    - name: custom-tools
      mountPath: /usr/local/bin/argocd-vault-plugin
      subPath: argocd-vault-plugin
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
  initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: 1.16.1
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/

      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  extraContainers:
    - name: avp-helm
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v2.7.9
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: avp-helm.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin